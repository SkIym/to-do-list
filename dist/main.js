(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>i});var r=n(537),s=n.n(r),o=n(645),a=n.n(o)()(s());a.push([t.id,":root {\n  --basic-layout-border: 1px solid black;\n}\n\n\n* {\n  margin: 0;\n  padding: 0;\n  outline: 0;\n}\n\n/* main grid */\n\n#main-grid {\n  display: grid;\n  grid-template-columns: max(15vw, 280px) 1fr;\n  grid-template-rows: 40px 1fr;\n  height: 100vh;\n}\n\n#header {\n  grid-column: 1 / 3;\n  border: var(--basic-layout-border);\n}\n\n#overview {\n  grid-row: 2 / 3;\n  grid-column: 1 / 2;\n  border: var(--basic-layout-border);\n  max-height: 100vh;\n  overflow-y: auto;\n}\n\n#proj-bench {\n  border: var(--basic-layout-border);\n}\n\n/* project overview */\n\n.project-item:hover {\n  cursor: pointer;\n  background-color: beige;\n}\n\n\n/* project bench */\n\n.task-item {\n  display: flex;\n\n}\n\n#task-details {\n  display: none; \n  background-color: blanchedalmond;\n  position: relative;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sCAAsC;AACxC;;;AAGA;EACE,SAAS;EACT,UAAU;EACV,UAAU;AACZ;;AAEA,cAAc;;AAEd;EACE,aAAa;EACb,2CAA2C;EAC3C,4BAA4B;EAC5B,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,kCAAkC;EAClC,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,kCAAkC;AACpC;;AAEA,qBAAqB;;AAErB;EACE,eAAe;EACf,uBAAuB;AACzB;;;AAGA,kBAAkB;;AAElB;EACE,aAAa;;AAEf;;AAEA;EACE,aAAa;EACb,gCAAgC;EAChC,kBAAkB;EAClB,SAAS;EACT,gCAAgC;AAClC",sourcesContent:[":root {\n  --basic-layout-border: 1px solid black;\n}\n\n\n* {\n  margin: 0;\n  padding: 0;\n  outline: 0;\n}\n\n/* main grid */\n\n#main-grid {\n  display: grid;\n  grid-template-columns: max(15vw, 280px) 1fr;\n  grid-template-rows: 40px 1fr;\n  height: 100vh;\n}\n\n#header {\n  grid-column: 1 / 3;\n  border: var(--basic-layout-border);\n}\n\n#overview {\n  grid-row: 2 / 3;\n  grid-column: 1 / 2;\n  border: var(--basic-layout-border);\n  max-height: 100vh;\n  overflow-y: auto;\n}\n\n#proj-bench {\n  border: var(--basic-layout-border);\n}\n\n/* project overview */\n\n.project-item:hover {\n  cursor: pointer;\n  background-color: beige;\n}\n\n\n/* project bench */\n\n.task-item {\n  display: flex;\n\n}\n\n#task-details {\n  display: none; \n  background-color: blanchedalmond;\n  position: relative;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n"],sourceRoot:""}]);const i=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(a[d]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],i=0;i<t.length;i++){var d=t[i],c=r.base?d[0]+r.base:d[0],l=o[c]||0,p="".concat(c," ").concat(l);o[c]=l+1;var u=n(p),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var h=s(m,r);r.byIndex=i,e.splice(i,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var o=r(t=t||[],s=s||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var i=n(o[a]);e[i].references--}for(var d=r(t,s),c=0;c<o.length;c++){var l=n(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=d}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,s&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var s=e[r];if(void 0!==s)return s.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),s=n.n(r),o=n(569),a=n.n(o),i=n(565),d=n.n(i),c=n(216),l=n.n(c),p=n(589),u=n.n(p),m=n(426),h={};h.styleTagTransform=u(),h.setAttributes=d(),h.insert=a().bind(null,"head"),h.domAPI=s(),h.insertStyleElement=l(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;class A{static appendChildren=(t,e=[])=>{e.forEach((e=>{t.appendChild(e)}))};static addId=(t,e)=>{t.id=e};static addClass=(t,e=[])=>{e.forEach((e=>{t.classList.add(e)}))};static addText=(t,e)=>{t.textContent=e};static addEvent=(t,e,n)=>{t.addEventListener(e,n)}}(()=>{const t=document.createElement("div");A.appendChildren(document.body,[t]),A.addId(t,"main-grid");const e=document.createElement("header");A.addId(e,"header"),A.addText(e,"TO-DO!");const n=document.createElement("div");A.addId(n,"overview");const r=document.createElement("div");A.addId(r,"project-display");const s=document.createElement("p");A.addText(s,"Your Projects");const o=document.createElement("div");A.addId(o,"project-items"),A.appendChildren(r,[s,o]);const a=document.createElement("div");A.addId(a,"add-project-container");const i=document.createElement("button");A.addId(i,"add-project"),A.addText(i,"Add new project"),A.appendChildren(a,[i]),A.appendChildren(n,[r,a]);const d=document.createElement("div");A.addId(d,"project-bench");const c=document.createElement("p");A.addText(c,"Create a project and start adding tasks!"),A.addId(c,"project-name");const l=document.createElement("div");A.addId(l,"task-display");const p=document.createElement("p");A.addText(p,"Your Tasks");const u=document.createElement("div");A.addId(u,"task-items"),A.appendChildren(l,[p,u]);const m=document.createElement("div");A.addId(m,"task-details");const h=document.createElement("div");h.id="task-title";const v=document.createElement("div");v.id="task-desc";const E=document.createElement("div");E.id="task-prio";const f=document.createElement("div");f.id="task-date";const C=document.createElement("div");C.id="task-notes";const k=document.createElement("div");k.id="task-checklist";const g=document.createElement("button");g.id="done-button-details",g.textContent="Done",A.appendChildren(m,[h,v,f,E,C,k,g]),A.appendChildren(d,[c,l,m]),A.appendChildren(t,[e,n,d])})();class v{constructor(t,e,n,r,s,o){this._title=t,this._description=e,this._dueDate=n,this._priority=r,this._notes=s,this._checklist=o}get title(){return this._title}set title(t){this._title=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get priority(){return this._priority}set priority(t){this._priority=t}get notes(){return this._notes}set notes(t){this._notes=t}get checklist(){return this._checklist}set checklist(t){this._checklist=t}}class E{constructor(t){this.list=t,this.pdItems=document.getElementById("project-items")}renderProjects(){this.pdItems.innerHTML="";for(const t of this.list.projects){const e=document.createElement("div");A.addClass(e,["project-item"]),A.addText(e,`${t.name}`),A.appendChildren(this.pdItems,[e]),e.addEventListener("click",(()=>{new f(t).renderTasks(),document.getElementById("task-details").style.display="none"}))}}}class f{constructor(t){this.project=t,this.tdItems=document.getElementById("task-items"),this.name=document.getElementById("project-name")}renderTasks(){this.tdItems.innerHTML="",A.addText(this.name,this.project.name);for(const t of this.project.tasks){const e=document.createElement("div");A.addClass(e,["task-item"]),e.innerHTML=`\n        <p>${t.title}</p>\n        <p>${t.dueDate}</p>\n      `;const n=document.createElement("button");n.addEventListener("click",(()=>{new C(t).renderDetails()})),n.textContent="Edit",e.appendChild(n);const r=document.createElement("button");r.addEventListener("click",(()=>{this.project.removeTask(t),this.renderTasks()})),r.textContent="Complete",e.appendChild(r),A.appendChildren(this.tdItems,[e])}const t=document.createElement("button");A.addId(t,"add-task"),A.addText(t,"Add new task"),t.addEventListener("click",(()=>{this.project.addTask(new v("0","1","2","3","4","5")),this.renderTasks()})),this.tdItems.appendChild(t)}}class C{constructor(t){this.task=t,this.details=document.getElementById("task-details"),this.title=document.getElementById("task-title"),this.dueDate=document.getElementById("task-date"),this.desc=document.getElementById("task-desc"),this.notes=document.getElementById("task-notes"),this.checklist=document.getElementById("task-checklist"),this.prio=document.getElementById("task-prio"),this.done=document.getElementById("done-button-details")}renderDetails(){this.details.style.display="flex",this.title.textContent=`${this.task.title}`,this.desc.textContent=`${this.task.description}`,this.dueDate.textContent=`${this.task.dueDate}`,this.prio.textContent=`${this.task.priority}`,this.notes.textContent=`${this.task.notes}`,this.checklist.textContent=`${this.task.checklist}`,this.done.onclick=()=>{this.details.style.display="none"}}}class k{constructor(){this._projects=[]}get projects(){return this._projects}addProject(t){this._projects.push(t)}removeProject(t){this._projects=this._projects.filter((e=>e!==t))}}class g{constructor(t){this._name=t,this._tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks}addTask(t){this._tasks.push(t)}removeTask(t){this._tasks=this._tasks.filter((e=>e!==t))}}(new class{constructor(){this.list=new k,this.list.addProject(new g("Home")),this.list.addProject(new g("School")),this.listRenderer=new E(this.list),this.addEvents()}addEvents(){document.getElementById("add-project").addEventListener("click",(()=>{this.list.addProject(new g(prompt("Name?"))),this.render()}))}render(){this.listRenderer.renderProjects()}}).render()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,