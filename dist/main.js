(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@300;400&family=REM:wght@200;300;400;500&display=swap);"]),i.push([t.id,":root {\n  --basic-layout-border: 1px solid black;\n  --basic-box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  --light-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n\n* {\n  margin: 0;\n  padding: 0;\n  outline: 0;\n  font-family: 'REM', sans-serif;\n  color: black;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: rgb(248, 250, 251);\n  height: 100vh;\n}\n\n/* main grid */\n\n#main-grid {\n  display: grid;\n  grid-template-columns: max(15vw, 280px) 1fr;\n  padding: 20px;\n  height: 100%;\n  gap: 20px;\n}\n\n/* header */\n\n/* project overview */\n\n#overview {\n  grid-column: 1 / 2;\n  height: 100%;\n  overflow-y: auto;\n  box-shadow: var(--basic-box-shadow);\n  border-radius: 4px;\n  background-color: white;\n  /* background-image: linear-gradient(0deg, #F8FFE5, 10%, white); */\n  border: 1px solid transparent;\n  transition: 0.5s ease-in-out;\n}\n\n#overview:hover {\n  border: 1px dashed #569c95;\n  /* background-image: linear-gradient(0deg, white, 95%, #F8FFE5); */\n}\n\n#project-display {\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n}\n\n#project-display > p {\n  font-size: 1.5rem;\n  font-weight: 500;\n}\n\n#project-items {\n  margin-top: 10px;\n  padding: 10px 0;\n  gap: 10px;\n  display: flex;\n  flex-direction: column;\n  font-weight: 300;\n}\n\n.project-item {\n  padding: 10px;\n  border-radius: 4px;\n  border-left: 5px solid #25444141;\n  /* border-bottom: 1px solid #25444141; */\n  transition: 0.2s ease-in-out;\n}\n\n.project-item:hover {\n  cursor: pointer;\n  border-color: #254441;\n}\n\n#add-project {\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: 300;\n  background-color: transparent;\n  transition: 0.3s ease-in-out;\n}\n\n#add-project:hover {\n  cursor: pointer;\n  color: #569c95;\n}\n\n#add-project-form {\n  flex-direction: column;\n  gap: 10px;\n}\n\n#add-project-form > * {\n  font-weight: 300;\n}\n\n#add-project-input {\n  padding: 10px;\n  font-size: 1rem;\n  border: 1px solid black;\n  border-radius: 4px;\n}\n\n#project-add-buttons {\n  display: flex;\n  gap: 5px;\n}\n\n#project-add-buttons > button {\n  width: 100%;\n  padding: 10px 0;\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n}\n\n#add-project-button {\n  background-color: #99e1d9;\n}\n\n#add-project-button:hover {\n  background-color: #b2ddd8;\n}\n\n#cancel-add-project-button {\n  background-color: #e893a2;\n}\n\n#cancel-add-project-button:hover {\n  background-color: #e8a7b3;\n}\n\n/* project bench */\n\n#project-bench {\n  display: flex;\n  /* padding: 20px; */\n  flex-direction: column;\n  align-items: center;\n  grid-column: 2 / 3;\n  /* box-shadow: var(--basic-box-shadow); */\n  border-radius: 4px;\n}\n\n#project-bench > p {\n  font-size: 1.7rem;\n  font-weight: 500;\n  align-self: start;\n  padding: 10px 20px;\n  width: 100%;\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n  border: 1px dashed gray;\n  background-image: linear-gradient(90deg, #F8FFE5, 50%, #7DDE92, #2EBFA5 );\n  box-shadow: var(--basic-box-shadow);\n}\n\n#task-display-container {\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: 70% 30%;\n  background-color: white;\n  box-shadow: var(--basic-box-shadow);\n}\n\n#task-display-container > * {\n  flex-direction: column;\n  padding: 10px;\n}\n\n#task-display {\n  border-right: 1px dashed black;\n}\n\n#task-display > p {\n  text-align: center;\n}\n\n#add-task-form {\n  \n}\n\n#prio-tag {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  font-size: 1rem;\n  margin-top: 10px;\n}\n\n#task-items {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 20px;\n}\n\n.task-item {\n  display: flex;\n  justify-content: space-between;\n  border-radius: 4px;\n  background-color: rgb(245, 245, 245);\n  border-left: 3px solid transparent;\n  box-shadow: var(--light-box-shadow);\n}\n\n#task-action-buttons {\n  display: flex;\n}\n\n.task-info {\n  padding: 15px 10px;\n  display: flex;\n  gap: 5px;\n}\n\n.task-action {\n  border: none;\n  transition: 0.2s ease-in-out;\n  height: 100%;\n  padding: 10px;\n  border-radius: 4px;\n}\n\n.edit-task {\n  background-color: #bec6ff;\n}\n\n.check-task {\n  background-color: #99e1d9;\n}\n\n.task-action:hover {\n  cursor: pointer;\n  color: #569c95; \n  border-radius: 0px;\n}\n\n.low-prio {\n  border-left-color: #5E9E29;\n}\n.mid-prio {\n  border-left-color: #2B3D9E;\n}\n.high-prio {\n  border-left-color: #EA4E19;\n}\n\n#low-prio-tag {\n  color: #5E9E29;\n}\n#mid-prio-tag {\n  color: #2B3D9E;\n}\n#high-prio-tag {\n  color: #EA4E19;\n}\n\n#task-details {\n  display: none; \n  background-color: blanchedalmond;\n  position: relative;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n  --basic-layout-border: 1px solid black;\n  --basic-box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  --light-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n\n@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@300;400&family=REM:wght@200;300;400;500&display=swap');\n\n\n* {\n  margin: 0;\n  padding: 0;\n  outline: 0;\n  font-family: 'REM', sans-serif;\n  color: black;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: rgb(248, 250, 251);\n  height: 100vh;\n}\n\n/* main grid */\n\n#main-grid {\n  display: grid;\n  grid-template-columns: max(15vw, 280px) 1fr;\n  padding: 20px;\n  height: 100%;\n  gap: 20px;\n}\n\n/* header */\n\n/* project overview */\n\n#overview {\n  grid-column: 1 / 2;\n  height: 100%;\n  overflow-y: auto;\n  box-shadow: var(--basic-box-shadow);\n  border-radius: 4px;\n  background-color: white;\n  /* background-image: linear-gradient(0deg, #F8FFE5, 10%, white); */\n  border: 1px solid transparent;\n  transition: 0.5s ease-in-out;\n}\n\n#overview:hover {\n  border: 1px dashed #569c95;\n  /* background-image: linear-gradient(0deg, white, 95%, #F8FFE5); */\n}\n\n#project-display {\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n}\n\n#project-display > p {\n  font-size: 1.5rem;\n  font-weight: 500;\n}\n\n#project-items {\n  margin-top: 10px;\n  padding: 10px 0;\n  gap: 10px;\n  display: flex;\n  flex-direction: column;\n  font-weight: 300;\n}\n\n.project-item {\n  padding: 10px;\n  border-radius: 4px;\n  border-left: 5px solid #25444141;\n  /* border-bottom: 1px solid #25444141; */\n  transition: 0.2s ease-in-out;\n}\n\n.project-item:hover {\n  cursor: pointer;\n  border-color: #254441;\n}\n\n#add-project {\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: 300;\n  background-color: transparent;\n  transition: 0.3s ease-in-out;\n}\n\n#add-project:hover {\n  cursor: pointer;\n  color: #569c95;\n}\n\n#add-project-form {\n  flex-direction: column;\n  gap: 10px;\n}\n\n#add-project-form > * {\n  font-weight: 300;\n}\n\n#add-project-input {\n  padding: 10px;\n  font-size: 1rem;\n  border: 1px solid black;\n  border-radius: 4px;\n}\n\n#project-add-buttons {\n  display: flex;\n  gap: 5px;\n}\n\n#project-add-buttons > button {\n  width: 100%;\n  padding: 10px 0;\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n}\n\n#add-project-button {\n  background-color: #99e1d9;\n}\n\n#add-project-button:hover {\n  background-color: #b2ddd8;\n}\n\n#cancel-add-project-button {\n  background-color: #e893a2;\n}\n\n#cancel-add-project-button:hover {\n  background-color: #e8a7b3;\n}\n\n/* project bench */\n\n#project-bench {\n  display: flex;\n  /* padding: 20px; */\n  flex-direction: column;\n  align-items: center;\n  grid-column: 2 / 3;\n  /* box-shadow: var(--basic-box-shadow); */\n  border-radius: 4px;\n}\n\n#project-bench > p {\n  font-size: 1.7rem;\n  font-weight: 500;\n  align-self: start;\n  padding: 10px 20px;\n  width: 100%;\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n  border: 1px dashed gray;\n  background-image: linear-gradient(90deg, #F8FFE5, 50%, #7DDE92, #2EBFA5 );\n  box-shadow: var(--basic-box-shadow);\n}\n\n#task-display-container {\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: 70% 30%;\n  background-color: white;\n  box-shadow: var(--basic-box-shadow);\n}\n\n#task-display-container > * {\n  flex-direction: column;\n  padding: 10px;\n}\n\n#task-display {\n  border-right: 1px dashed black;\n}\n\n#task-display > p {\n  text-align: center;\n}\n\n#add-task-form {\n  \n}\n\n#prio-tag {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  font-size: 1rem;\n  margin-top: 10px;\n}\n\n#task-items {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 20px;\n}\n\n.task-item {\n  display: flex;\n  justify-content: space-between;\n  border-radius: 4px;\n  background-color: rgb(245, 245, 245);\n  border-left: 3px solid transparent;\n  box-shadow: var(--light-box-shadow);\n}\n\n#task-action-buttons {\n  display: flex;\n}\n\n.task-info {\n  padding: 15px 10px;\n  display: flex;\n  gap: 5px;\n}\n\n.task-action {\n  border: none;\n  transition: 0.2s ease-in-out;\n  height: 100%;\n  padding: 10px;\n  border-radius: 4px;\n}\n\n.edit-task {\n  background-color: #bec6ff;\n}\n\n.check-task {\n  background-color: #99e1d9;\n}\n\n.task-action:hover {\n  cursor: pointer;\n  color: #569c95; \n  border-radius: 0px;\n}\n\n.low-prio {\n  border-left-color: #5E9E29;\n}\n.mid-prio {\n  border-left-color: #2B3D9E;\n}\n.high-prio {\n  border-left-color: #EA4E19;\n}\n\n#low-prio-tag {\n  color: #5E9E29;\n}\n#mid-prio-tag {\n  color: #2B3D9E;\n}\n#high-prio-tag {\n  color: #EA4E19;\n}\n\n#task-details {\n  display: none; \n  background-color: blanchedalmond;\n  position: relative;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},i=[],s=0;s<t.length;s++){var d=t[s],c=r.base?d[0]+r.base:d[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var h=n(u),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==h)e[h].references++,e[h].updater(A);else{var p=a(A,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=n(o[i]);e[s].references--}for(var d=r(t,a),c=0;c<o.length;c++){var l=n(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=d}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!t;)t=r[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),a=n.n(r),o=n(569),i=n.n(o),s=n(565),d=n.n(s),c=n(216),l=n.n(c),u=n(589),h=n.n(u),A=n(426),p={};p.styleTagTransform=h(),p.setAttributes=d(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=l(),e()(A.Z,p),A.Z&&A.Z.locals&&A.Z.locals;class m{static appendChildren=(t,e=[])=>{e.forEach((e=>{t.appendChild(e)}))};static addId=(t,e)=>{t.id=e};static addClass=(t,e=[])=>{e.forEach((e=>{t.classList.add(e)}))};static addText=(t,e)=>{t.textContent=e};static toggleToFlex(t){t.style.display="none"==t.style.display?"flex":"none"}static toggleToBlock(t){t.style.display="none"==t.style.display?"block":"none"}}const g=n.p+"d265cb79f434ff980613.png",f=((()=>{const t=document.createElement("div");m.appendChildren(document.body,[t]),m.addId(t,"main-grid");const e=document.createElement("div");m.addId(e,"overview");const n=document.createElement("div");m.addId(n,"project-display");const r=document.createElement("p");m.addText(r,"Your Projects");const a=document.createElement("div");m.addId(a,"project-items");const o=document.createElement("button");m.addId(o,"add-project");const i=new Image;i.src=g,i.style.width="10px",o.appendChild(i),o.innerHTML+="Add project";const s=document.createElement("div");s.id="add-project-form",s.style.display="none";const d=document.createElement("input");d.name="add-project-input",d.type="text",d.id="add-project-input",d.placeholder="Input a valid project name",d.pattern="[A-Za-z]+";const c=document.createElement("div");c.id="project-add-buttons";const l=document.createElement("button");l.textContent="Add",l.type="button",l.id="add-project-button";const u=document.createElement("button");u.textContent="Cancel",l.type="button",u.id="cancel-add-project-button",m.appendChildren(c,[l,u]),m.appendChildren(s,[d,c]),m.appendChildren(n,[r,a,o,s]),m.appendChildren(e,[n]);const h=document.createElement("div");h.id="project-bench";const A=document.createElement("p");m.addText(A,"Create a project and start adding tasks!"),m.addId(A,"project-name");const p=document.createElement("div");p.id="task-display-container";const f=document.createElement("div");m.addId(f,"task-display"),f.style.display="none";const b=document.createElement("p");b.textContent="Your Tasks";const E=document.createElement("div");E.id="prio-tag";const v=document.createElement("p");v.textContent="Priority: ";const C=document.createElement("p");C.textContent="Low",C.id="low-prio-tag";const y=document.createElement("p");y.textContent="Mid",y.id="mid-prio-tag";const w=document.createElement("p");w.textContent="High",w.id="high-prio-tag",m.appendChildren(E,[v,C,y,w]);const k=document.createElement("div");m.addId(k,"task-items"),m.appendChildren(f,[b,E,k]);const x=document.createElement("div");x.id="add-task-form",x.style.display="none";const B=document.createElement("p");B.textContent="Add a task",B.id="add-task-tag";const j=document.createElement("input");j.id="task-title-input",j.type="text";const T=document.createElement("input");T.id="task-desc-input",T.type="text";const M=document.createElement("input");M.id="task-date-input",M.type="date";const D=document.createElement("input");D.id="task-time-input",D.type="time";const S=document.createElement("select");S.id="task-prio-input";const P=document.createElement("option");P.textContent="High",P.value=3;const R=document.createElement("option");R.textContent="Mid",R.value=2;const U=document.createElement("option");U.textContent="Low",U.value=1,U.setAttribute("selected",""),m.appendChildren(S,[P,R,U]);const F=document.createElement("div"),W=document.createElement("button");W.id="add-task-add",W.textContent="Add";const Y=document.createElement("button");Y.id="delete-task-button",Y.textContent="Delete",Y.style.display="none",console.log(W),m.appendChildren(F,[W,Y]);const I=document.createElement("p");I.id="input-warning",m.appendChildren(x,[B,j,T,M,D,S,F,I]),m.appendChildren(p,[f,x]),m.appendChildren(h,[A,p]),m.appendChildren(t,[e,h]),document.querySelectorAll("input").forEach((t=>{t.setAttribute("required","")}))})(),document.getElementById("add-project-form")),b=document.getElementById("add-project"),E=document.getElementById("add-project-input"),v=document.getElementById("add-project-button"),C=document.getElementById("cancel-add-project-button");function y(){return document.querySelectorAll(".project-item")}function w(){return document.querySelectorAll(".edit-task")}function k(){return document.querySelectorAll(".check-task")}console.log(b);const x=document.getElementById("task-display"),B=document.getElementById("add-task-form"),j=document.getElementById("add-task-add"),T=document.getElementById("add-task-tag"),M=document.getElementById("task-title-input"),D=document.getElementById("task-desc-input"),S=document.getElementById("task-date-input"),P=document.getElementById("task-prio-input"),R=document.getElementById("task-time-input"),U=document.getElementById("input-warning"),F=document.getElementById("delete-task-button");document.getElementById("task-details");const W=new class{constructor(){this.task=null,this.project=null,this.details=B,this.title=M,this.dueDate=S,this.dueTime=R,this.desc=D,this.prio=P,this.edit=j,this.tag=T,this.delete=F,this.warning=U}renderDetails(t,e){this.task=t,this.project=e,this.warning.textContent="",this.details.style.display="flex",this.title.value=`${this.task.title}`,this.dueTime.value=`${this.task.dueTime}`,this.desc.value=`${this.task.description}`,this.dueDate.value=`${this.task.dueDate}`,this.prio.value=`${this.task.priority}`}showWarning(){this.warning.textContent="Please input task title and due date"}hideWarning(){this.warning.textContent=""}},Y=new class{constructor(){this.tdItems=document.getElementById("task-items"),this.name=document.getElementById("project-name"),this.project=null,this.taskDisplay=x,this.completeBtns=k(),this.editBtns=w()}renderTasks(t){this.project=t,this.tdItems.innerHTML="",m.addText(this.name,t.name);let e=0;for(const n of t.tasks){const t=document.createElement("div");t.classList.add("task-item"),t.innerHTML=`\n        <div class='task-info'> \n          <p>${n.title} - </p>\n          <p>${n.formattedDueDate()}</p>\n        </div>\n      `;const r=document.createElement("div");r.id="task-action-buttons";const a=document.createElement("button");a.textContent="Edit",a.id=`${e}`,m.addClass(a,["task-action","edit-task"]);const o=document.createElement("button");o.textContent="Complete",o.id=`${e}`,m.addClass(o,["task-action","check-task"]),m.appendChildren(r,[a,o]),t.appendChild(r),this.tdItems.appendChild(t),this.colorAccdgToPrio(n.priority,t),e++}this.completeBtns=k(),this.editBtns=w()}colorAccdgToPrio(t,e){1===t?e.classList.add("low-prio"):2===t?e.classList.add("mid-prio"):e.classList.add("high-prio")}};class I{constructor(t){this.list=t,this.pdItems=document.getElementById("project-items"),this.addProjField=E,this.addProjectForm=f,this.addProjectBtn=b,this.addProjectCancel=C,this.addProjectAdd=v,this.projectItems=y()}renderProjects(){this.pdItems.innerHTML="";let t=0;for(const e of this.list.projects){const n=document.createElement("div");n.classList.add("project-item"),n.textContent=`${e.name}`,m.appendChildren(this.pdItems,[n]),n.id=`${t}`,t++}this.projectItems=y()}}function L(t){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L(t)}function _(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function N(t){_(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===L(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function O(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function q(t){_(1,arguments);var e=N(t),n=e.getUTCDay(),r=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function z(t){_(1,arguments);var e=N(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=q(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=q(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}var H={};function Q(){return H}function X(t,e){var n,r,a,o,i,s,d,c;_(1,arguments);var l=Q(),u=O(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==a?a:l.weekStartsOn)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=N(t),A=h.getUTCDay(),p=(A<u?7:0)+A-u;return h.setUTCDate(h.getUTCDate()-p),h.setUTCHours(0,0,0,0),h}function $(t,e){var n,r,a,o,i,s,d,c;_(1,arguments);var l=N(t),u=l.getUTCFullYear(),h=Q(),A=O(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:h.firstWeekContainsDate)&&void 0!==r?r:null===(d=h.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(u+1,0,A),p.setUTCHours(0,0,0,0);var m=X(p,e),g=new Date(0);g.setUTCFullYear(u,0,A),g.setUTCHours(0,0,0,0);var f=X(g,e);return l.getTime()>=m.getTime()?u+1:l.getTime()>=f.getTime()?u:u-1}function G(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const Z=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return G("yy"===e?r%100:r,e.length)},J=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):G(n+1,2)},V=function(t,e){return G(t.getUTCDate(),e.length)},K=function(t,e){return G(t.getUTCHours()%12||12,e.length)},tt=function(t,e){return G(t.getUTCHours(),e.length)},et=function(t,e){return G(t.getUTCMinutes(),e.length)},nt=function(t,e){return G(t.getUTCSeconds(),e.length)},rt=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return G(Math.floor(r*Math.pow(10,n-3)),e.length)};var at={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return Z(t,e)},Y:function(t,e,n,r){var a=$(t,r),o=a>0?a:1-a;return"YY"===e?G(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):G(o,e.length)},R:function(t,e){return G(z(t),e.length)},u:function(t,e){return G(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return G(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return G(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return J(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return G(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){_(1,arguments);var n=N(t),r=X(n,e).getTime()-function(t,e){var n,r,a,o,i,s,d,c;_(1,arguments);var l=Q(),u=O(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:l.firstWeekContainsDate)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),h=$(t,e),A=new Date(0);return A.setUTCFullYear(h,0,u),A.setUTCHours(0,0,0,0),X(A,e)}(n,e).getTime();return Math.round(r/6048e5)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):G(a,e.length)},I:function(t,e,n){var r=function(t){_(1,arguments);var e=N(t),n=q(e).getTime()-function(t){_(1,arguments);var e=z(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),q(n)}(e).getTime();return Math.round(n/6048e5)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):G(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):V(t,e)},D:function(t,e,n){var r=function(t){_(1,arguments);var e=N(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=n-e.getTime();return Math.floor(r/864e5)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):G(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return G(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return G(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return G(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return K(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):tt(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):G(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):G(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):et(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):nt(t,e)},S:function(t,e){return rt(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return it(a);case"XXXX":case"XX":return st(a);default:return st(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return it(a);case"xxxx":case"xx":return st(a);default:return st(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+ot(a,":");default:return"GMT"+st(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+ot(a,":");default:return"GMT"+st(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return G(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return G((r._originalDate||t).getTime(),e.length)}};function ot(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+G(o,2)}function it(t,e){return t%60==0?(t>0?"-":"+")+G(Math.abs(t)/60,2):st(t,e)}function st(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+G(Math.floor(a/60),2)+n+G(a%60,2)}const dt=at;var ct=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},lt=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const ut={p:lt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return ct(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",ct(a,e)).replace("{{time}}",lt(o,e))}};var ht=["D","DD"],At=["YY","YYYY"];function pt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var mt={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function gt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const ft={date:gt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:gt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:gt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var bt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Et(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const vt={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Et({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Et({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:Et({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Et({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Et({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Ct(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,s=o[0],d=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(d)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(s))return n}(d):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(s))return n}(d);return i=t.valueCallback?t.valueCallback(c):c,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(s.length)}}}var yt,wt={ordinalNumber:(yt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(yt.matchPattern);if(!n)return null;var r=n[0],a=t.match(yt.parsePattern);if(!a)return null;var o=yt.valueCallback?yt.valueCallback(a[0]):a[0];return{value:o=e.valueCallback?e.valueCallback(o):o,rest:t.slice(r.length)}}),era:Ct({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Ct({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:Ct({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Ct({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Ct({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const kt={code:"en-US",formatDistance:function(t,e,n){var r,a=mt[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:ft,formatRelative:function(t,e,n,r){return bt[t]},localize:vt,match:wt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var xt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Bt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,jt=/^'([^]*?)'?$/,Tt=/''/g,Mt=/[a-zA-Z]/;function Dt(t,e,n){var r,a,o,i,s,d,c,l,u,h,A,p,m,g,f,b,E,v;_(2,arguments);var C=String(e),y=Q(),w=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:y.locale)&&void 0!==r?r:kt,k=O(null!==(o=null!==(i=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:y.firstWeekContainsDate)&&void 0!==i?i:null===(u=y.locale)||void 0===u||null===(h=u.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==o?o:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var x=O(null!==(A=null!==(p=null!==(m=null!==(g=null==n?void 0:n.weekStartsOn)&&void 0!==g?g:null==n||null===(f=n.locale)||void 0===f||null===(b=f.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==m?m:y.weekStartsOn)&&void 0!==p?p:null===(E=y.locale)||void 0===E||null===(v=E.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==A?A:0);if(!(x>=0&&x<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!w.localize)throw new RangeError("locale must contain localize property");if(!w.formatLong)throw new RangeError("locale must contain formatLong property");var B=N(t);if(!function(t){if(_(1,arguments),!function(t){return _(1,arguments),t instanceof Date||"object"===L(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=N(t);return!isNaN(Number(e))}(B))throw new RangeError("Invalid time value");var j=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(B),T=function(t,e){return _(2,arguments),function(t,e){_(2,arguments);var n=N(t).getTime(),r=O(e);return new Date(n+r)}(t,-O(e))}(B,j),M={firstWeekContainsDate:k,weekStartsOn:x,locale:w,_originalDate:B};return C.match(Bt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ut[e])(t,w.formatLong):t})).join("").match(xt).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(jt))?o[1].replace(Tt,"'"):a;var s,d=dt[i];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=r,-1===At.indexOf(s))||pt(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!function(t){return-1!==ht.indexOf(t)}(r)||pt(r,e,String(t)),d(T,r,w.localize,M);if(i.match(Mt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}class St{constructor(t,e,n,r,a){this._title=t,this._description=e,this._dueDate=n,this._dueTime=r,this._priority=a}get title(){return this._title}set title(t){this._title=t}get description(){return this._description}set description(t){this._description=t}get dueDate(){return this._dueDate}formattedDueDate(){return Dt(new Date(this._dueDate),"MMM dd")}set dueDate(t){this._dueDate=t}get dueTime(){return this._dueTime}set dueTime(t){this._dueTime=t}get priority(){return this._priority}set priority(t){this._priority=t}static fromStorage(t){return console.log(t._priority),new St(t._title,t._description,t._dueDate,t._dueTime,t._priority)}}class Pt{constructor(t){this._name=t,this._tasks=[]}get name(){return this._name}set name(t){this._name=t}get tasks(){return this._tasks.sort(((t,e)=>t.priority>e.priority?-1:1))}set tasks(t){this._tasks=t}getTask(t){return this._tasks[t]}addTask(t){this._tasks.push(t)}removeTask(t){this._tasks=this._tasks.filter((e=>e!==t))}static fromStorage(t){const e=new Pt;return e.name=t._name,e.tasks=t._tasks.map((t=>St.fromStorage(t))),e}}class Rt{constructor(){this._projects=[]}get projects(){return this._projects}set projects(t){this._projects=t}getProject(t){return this._projects[t]}addProject(t){this._projects.push(t)}removeProject(t){this._projects=this._projects.filter((e=>e!==t))}static fromStorage(t){const e=new Rt;return e.projects=t._projects.map((t=>Pt.fromStorage(t))),e}}new class{constructor(){this.list=null,this.listRenderer=null,this.projectRenderer=Y,this.taskRenderer=W,this.loadFromLocalStorage(),this.renderList(),this.addEventsStatic()}saveToLocalStorage(){localStorage.setItem("todolist",JSON.stringify(this.list))}loadFromLocalStorage(){const t=localStorage.getItem("todolist");console.log(JSON.parse(t)),t?this.list=Rt.fromStorage(JSON.parse(t)):(this.list=new Rt,this.list.addProject(new Pt("Home")),this.list.addProject(new Pt("School"))),this.listRenderer=new I(this.list)}addEventsStatic(){this.listRenderer.addProjectBtn.addEventListener("click",(()=>{this.refreshList(),this.refreshProjectForm()})),this.listRenderer.addProjectCancel.addEventListener("click",(()=>{this.refreshList()})),this.listRenderer.addProjectAdd.addEventListener("click",(()=>{let t=this.listRenderer.addProjField.value;t&&(this.list.addProject(new Pt(`${t}`)),this.refreshList(),this.saveToLocalStorage())})),this.taskRenderer.edit.addEventListener("click",(()=>{const t=this.projectRenderer.project,e=this.taskRenderer.task;this.taskRenderer.hideWarning();let n=this.taskRenderer.title.value,r=this.taskRenderer.desc.value,a=this.taskRenderer.dueDate.value,o=parseInt(this.taskRenderer.prio.value),i=this.taskRenderer.dueTime.value;a&&n?(e?(e.title=n,e.description=r,e.dueDate=a,e.dueTime=i,e.priority=o):t.addTask(new St(n,r,a,i,o)),this.refreshProject(t),this.taskAddMode(),this.taskRenderer.task=null):this.taskRenderer.showWarning()})),this.taskRenderer.delete.addEventListener("click",(()=>{const t=this.taskRenderer.project,e=this.taskRenderer.task;t.removeTask(e),this.refreshProject(t),this.taskRenderer.task=null,this.taskAddMode()}))}updateProjects(){this.listRenderer.projectItems.forEach((t=>{t.addEventListener("click",(()=>{this.refreshProject(this.list.getProject(t.id)),this.loadProjectDisplay()}))}))}updateTasks(){this.projectRenderer.completeBtns.forEach((t=>{t.addEventListener("click",(()=>{const e=this.projectRenderer.project;e.removeTask(e.getTask(t.id)),this.refreshProject(e),this.refreshTaskForm()}))})),this.projectRenderer.editBtns.forEach((t=>{t.addEventListener("click",(()=>{const e=this.projectRenderer.project,n=e.getTask(t.id);this.taskRenderer.renderDetails(n,e),this.taskEditMode()}))}))}renderList(){this.listRenderer.renderProjects(),this.updateProjects()}refreshList(){this.renderList(),this.refreshProjectForm(),m.toggleToFlex(this.listRenderer.addProjectForm),m.toggleToFlex(this.listRenderer.addProjectBtn)}refreshProject(t){console.log(t),this.projectRenderer.renderTasks(t),this.updateTasks(),this.saveToLocalStorage()}hideDetails(){this.taskRenderer.details.style.display="none"}toggleTaskForm(){m.toggleToFlex(this.taskRenderer.details)}refreshTaskForm(){this.taskRenderer.title.value="",this.taskRenderer.desc.value="",this.taskRenderer.dueDate.value="",this.taskRenderer.prio.value=1,this.taskRenderer.dueTime.value="",this.taskRenderer.tag.textContent="Add a task"}refreshProjectForm(){this.listRenderer.addProjField.value=""}loadProjectDisplay(){this.projectRenderer.taskDisplay.style.display="flex",this.taskRenderer.details.style.display="flex"}taskEditMode(){this.taskRenderer.edit.textContent="Done",this.taskRenderer.tag.textContent="Edit task",this.taskRenderer.delete.style.display="block"}taskAddMode(){this.taskRenderer.edit.textContent="Add",this.taskRenderer.delete.style.display="none",this.refreshTaskForm()}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,